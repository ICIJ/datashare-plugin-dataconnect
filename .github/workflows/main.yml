name: Datashare Plugin Dataconnect - CI

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATASHARE_VERSION: '16.0.3'
      DATASHARE_PACKAGE: 'datashare-16.0.3.deb'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.1'

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: yarn-packages-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-packages-${{ runner.os }}-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Download Datashare for Debian
        run: wget "https://github.com/ICIJ/datashare-installer/releases/download/${{ env.DATASHARE_VERSION }}/${{ env.DATASHARE_PACKAGE }}"

      - name: Install Datashare
        run: sudo apt install -y ./${{ env.DATASHARE_PACKAGE }}

      - name: Run Datashare in background
        run: mkdir -p tmp && yarn run test:datashare &
      
      - name: Run all tests
        run: yarn test

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    env:
      DATASHARE_VERSION: '16.0.3'
      DATASHARE_PACKAGE: 'datashare-16.0.3.deb'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.19.1'

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: yarn-packages-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-packages-${{ runner.os }}-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Make distribution
        run: yarn build

      - name: Create release assets
        run: |
          mkdir datashare-plugin-dataconnect-${{ github.ref_name }}
          cp package.json datashare-plugin-dataconnect-${{ github.ref_name }}
          cp -R dist datashare-plugin-dataconnect-${{ github.ref_name }}
          tar czf datashare-plugin-dataconnect-${{ github.ref_name }}.tgz datashare-plugin-dataconnect-${{ github.ref_name }}
          zip -r datashare-plugin-dataconnect-${{ github.ref_name }}.zip datashare-plugin-dataconnect-${{ github.ref_name }}

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url=$(curl -X POST -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" -d "{\"tag_name\":\"${{ github.ref_name }}\", \"name\":\"${{ github.ref_name }}\",\"body\":\"release ${{ github.ref_name }}\"}" "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.upload_url')
          upload_url="${upload_url%\{*}"
          echo "Uploading asset to release url: $upload_url"
          zip_content_length=$(stat -c%s "datashare-plugin-dataconnect-${{ github.ref_name }}.zip")
          tar_content_length=$(stat -c%s "datashare-plugin-dataconnect-${{ github.ref_name }}.tgz")
          curl -X POST -s -m 120 -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/zip" -H "Content-Length: $zip_content_length" --data-binary "@datashare-plugin-dataconnect-${{ github.ref_name }}.zip" "$upload_url?name=datashare-plugin-dataconnect-${{ github.ref_name }}.zip&label=datashare-plugin-dataconnect-${{ github.ref_name }}.zip"
          curl -X POST -s -m 120 -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/gzip" -H "Content-Length: $tar_content_length" --data-binary "@datashare-plugin-dataconnect-${{ github.ref_name }}.tgz" "$upload_url?name=datashare-plugin-dataconnect-${{ github.ref_name }}.tgz&label=datashare-plugin-dataconnect-${{ github.ref_name }}.tgz"
